/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
    _type: 'sanity.imagePaletteSwatch'
    background?: string
    foreground?: string
    population?: number
    title?: string
}

export type SanityImagePalette = {
    _type: 'sanity.imagePalette'
    darkMuted?: SanityImagePaletteSwatch
    lightVibrant?: SanityImagePaletteSwatch
    darkVibrant?: SanityImagePaletteSwatch
    vibrant?: SanityImagePaletteSwatch
    dominant?: SanityImagePaletteSwatch
    lightMuted?: SanityImagePaletteSwatch
    muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
    _type: 'sanity.imageDimensions'
    height?: number
    width?: number
    aspectRatio?: number
}

export type Geopoint = {
    _type: 'geopoint'
    lat?: number
    lng?: number
    alt?: number
}

export type Video = {
    url?: string
    posterImage?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    _type: 'video'
    _key: string
}

export type Image = {
    asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    _type: 'image'
    _key: string
}

export type Documentation = {
    _id: string
    _type: 'documentation'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    startYear?: number
    endYear?: number
    content?: ContentEditor
    slideshow?: Array<Image | Video>
    slug?: Slug
}

export type Work = {
    _id: string
    _type: 'work'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    featuredImage?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    startYear?: number
    endYear?: number
    participants?: string
    content?: ContentEditor
    documentation?: Documentation[]
    slug?: Slug
}

export type Slug = {
    _type: 'slug'
    current?: string
    source?: string
}

export type ContributionsToResearch = {
    _id: string
    _type: 'contributionsToResearch'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    list?: Array<{
        year?: number
        content?: ContentEditor
        externalLink?: string
        _type: 'field'
        _key: string
    }>
}

export type TextAndArchive = {
    _id: string
    _type: 'textAndArchive'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    list?: Array<{
        year?: number
        content?: ContentEditor
        externalLink?: string
        _type: 'field'
        _key: string
    }>
}

export type CvAndContact = {
    _id: string
    _type: 'cvAndContact'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title?: string
    cv?: Array<{
        title?: string
        content?: ContentEditor
        _type: 'field'
        _key: string
    }>
    fullCV?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
        }
        _type: 'file'
    },
    fullCVUrl?: string
}

export type SanityFileAsset = {
    _id: string
    _type: 'sanity.fileAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    source?: SanityAssetSourceData
}

export type About = {
    _id: string
    _type: 'about'
    _createdAt: string
    _updatedAt: string
    _rev: string
    featuredImage?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    startYear?: number
    endYear?: number
    content?: ContentEditor
}

export type MainPageTop = {
    _id: string
    _type: 'mainPageTop'
    _createdAt: string
    _updatedAt: string
    _rev: string
    featuredImage?: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    startYear?: number
    endYear?: number
}

export type Blocks = Array<
    | {
        children?: Array<{
            marks?: Array<string>
            text?: string
            _type: 'span'
            _key: string
        }>
        style?: 'normal'
        listItem?: never
        markDefs?: Array<{
            href?: string
            _type: 'link'
            _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
    }
    | {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
        _key: string
    }
>

export type ContentEditor = {
    _type: 'contentEditor'
    content?: Blocks
}

export type SanityImageCrop = {
    _type: 'sanity.imageCrop'
    top?: number
    bottom?: number
    left?: number
    right?: number
}

export type SanityImageHotspot = {
    _type: 'sanity.imageHotspot'
    x?: number
    y?: number
    height?: number
    width?: number
}

export type SanityImageAsset = {
    _id: string
    _type: 'sanity.imageAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    metadata?: SanityImageMetadata
    source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
    _type: 'sanity.assetSourceData'
    name?: string
    id?: string
    url?: string
}

export type SanityImageMetadata = {
    _type: 'sanity.imageMetadata'
    location?: Geopoint
    dimensions?: SanityImageDimensions
    palette?: SanityImagePalette
    lqip?: string
    blurHash?: string
    hasAlpha?: boolean
    isOpaque?: boolean
}
export declare const internalGroqTypeReferenceTo: unique symbol
